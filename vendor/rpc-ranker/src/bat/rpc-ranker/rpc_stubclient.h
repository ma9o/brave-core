/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_STUBCLIENT_H_
#define JSONRPC_CPP_STUB_STUBCLIENT_H_

#include <jsonrpccpp/client.h>

class StubClient : public jsonrpc::Client
{
    public:
        StubClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        std::string eth_protocolVersion() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_protocolVersion",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_hashrate() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_hashrate",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_coinbase() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_coinbase",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool eth_mining() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_mining",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_gasPrice() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_gasPrice",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_accounts() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_accounts",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_blockNumber() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_blockNumber",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_getBalance(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getBalance",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_getStorageAt(const std::string& param01, const std::string& param02, const std::string& param03) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            p.append(param03);
            Json::Value result = this->CallMethod("eth_getStorageAt",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_getStorageRoot(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getStorageRoot",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_getTransactionCount(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getTransactionCount",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_pendingTransactions() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_pendingTransactions",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getBlockTransactionCountByHash(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getBlockTransactionCountByHash",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getBlockTransactionCountByNumber(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getBlockTransactionCountByNumber",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getUncleCountByBlockHash(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getUncleCountByBlockHash",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getUncleCountByBlockNumber(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getUncleCountByBlockNumber",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_getCode(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getCode",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_sendTransaction(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_sendTransaction",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_call(const Json::Value& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_call",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool eth_flush() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_flush",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getBlockByHash(const std::string& param01, bool param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getBlockByHash",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getBlockByNumber(const std::string& param01, bool param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getBlockByNumber",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getTransactionByHash(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getTransactionByHash",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getTransactionByBlockHashAndIndex(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getTransactionByBlockHashAndIndex",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getTransactionByBlockNumberAndIndex(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getTransactionByBlockNumberAndIndex",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getTransactionReceipt(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getTransactionReceipt",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getUncleByBlockHashAndIndex(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getUncleByBlockHashAndIndex",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getUncleByBlockNumberAndIndex(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_getUncleByBlockNumberAndIndex",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_newFilter(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_newFilter",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_newFilterEx(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_newFilterEx",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_newBlockFilter() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_newBlockFilter",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_newPendingTransactionFilter() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_newPendingTransactionFilter",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool eth_uninstallFilter(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_uninstallFilter",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getFilterChanges(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getFilterChanges",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getFilterChangesEx(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getFilterChangesEx",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getFilterLogs(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getFilterLogs",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getFilterLogsEx(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getFilterLogsEx",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getLogs(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getLogs",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getLogsEx(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_getLogsEx",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_getWork() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_getWork",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool eth_submitWork(const std::string& param01, const std::string& param02, const std::string& param03) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            p.append(param03);
            Json::Value result = this->CallMethod("eth_submitWork",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool eth_submitHashrate(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("eth_submitHashrate",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_register(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_register",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool eth_unregister(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_unregister",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_fetchQueuedTransactions(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_fetchQueuedTransactions",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_signTransaction(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_signTransaction",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_inspectTransaction(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_inspectTransaction",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_sendRawTransaction(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_sendRawTransaction",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool eth_notePassword(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_notePassword",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value eth_syncing() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_syncing",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_estimateGas(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("eth_estimateGas",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string eth_chainId() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("eth_chainId",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_STUBCLIENT_H_
